[manifest]
version = '1.0.0'
dump_lua = true
priority = 0

[[patches]]
[patches.pattern]
target = 'functions/button_callbacks.lua'  
pattern = '''if hook.config.ref_table.extended_corpus then'''
position = 'at'
payload = '''
    if hook.config.ref_table.seed and hook_config.text.letters[1] == '' then
        corpus = '@123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'
        if args.key == '2' and args.caps then args.key = '@' end
    elseif hook.config.ref_table.extended_corpus then
'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'functions/button_callbacks.lua'  
pattern = '''create_text_input({max_length = 8, all_caps = true, ref_table = G, ref_value = 'setup_seed', prompt_text = localize('k_enter_seed')}),'''
position = 'at'
payload = '''
    create_text_input({max_length = 8, all_caps = true, ref_table = G, ref_value = 'setup_seed', seed = true, prompt_text = localize('k_enter_seed')}),
'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'functions/button_callbacks.lua'  
pattern = '''local _seed = G.run_setup_seed and G.setup_seed or G.forced_seed or nil'''
position = 'after'
payload = '''
    if _seed and string.sub(_seed, 1, 1) == '@' then
        G.DEBUG_SEED = string.sub(_seed, 2, 8)
        _seed = nil
    else
        G.DEBUG_SEED = nil
    end
'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'functions/state_events.lua'  
pattern = '''G.E_MANAGER:add_event(Event({
        trigger = 'immediate',
        func = (function()     
            if G.GAME.modifiers.debuff_played_cards then'''
position = 'before'
payload = '''
    delay(0.3)
    if G.GAME.selected_back.name == 'Random Deck' then
        for i=1, #scoring_hand do
            local card = scoring_hand[i]
            if not card.randomized then 
                card.randomized = true
                local _rank = pseudorandom_element({'2','3','4','5','6','7','8','9','T','J','Q','K','A'}, pseudoseed('random_deck'))
                local _suit = pseudorandom_element({'S','H','C','D'}, pseudoseed('random_deck'))
                _suit = _suit or 'S'; _rank = _rank or 'A'
                local center = G.P_CENTERS.c_base
                local editionProc =  pseudorandom(pseudoseed('random_deck')) < G.GAME.probabilities.normal/(G.GAME.RAND_EPROC or 8)
                if editionProc then
                    local cen_pool = {}
                    for k, v in pairs(G.P_CENTER_POOLS["Enhanced"]) do
                        if v.key ~= 'm_stone' then 
                            cen_pool[#cen_pool+1] = v
                        end
                    end
                    center = pseudorandom_element(cen_pool, pseudoseed('random_deck'))
                end
                card:set_ability(center, nil, true)
                G.E_MANAGER:add_event(Event({
                    func = function()
                        -- G.MESSAGES = (G.MESSAGES or "") .. "Card: " .. (card.base.name or 'unkn') .. " randomized to " .. _suit .. _rank .. " with ability " .. center.key .. "Proc: " .. editionProc .. "\n"
                        card:set_base(G.P_CARDS[_suit .. '_' .._rank])
                        card:juice_up(0.3, 0.5, editionProc and {
                            text = localize('k_enhanced'),
                            colour = G.C.ORANGE,
                        })
                        card.randomized = nil
                        return true
                    end
                }))
            end
        end
        delay(1)
    end
'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'card.lua'  
pattern = '''function Card:juice_up(scale, rot_amount)
    --G.VIBRATION = G.VIBRATION + 0.4
    local rot_amt = rot_amount and 0.4*(math.random()>0.5 and 1 or -1)*rot_amount or (math.random()>0.5 and 1 or -1)*0.16
    scale = scale and scale*0.4 or 0.11
    Moveable.juice_up(self, scale, rot_amt)
end'''
position = 'at'
payload = '''
    function Card:juice_up(scale, rot_amount, text_params)
        --G.VIBRATION = G.VIBRATION + 0.4
        local rot_amt = rot_amount and 0.4*(math.random()>0.5 and 1 or -1)*rot_amount or (math.random()>0.5 and 1 or -1)*0.16
        scale = scale and scale*0.4 or 0.11
        Moveable.juice_up(self, scale, rot_amt)
        if text_params then
            self:juice_text(text_params)
        end
    end

    function Card:juice_text(params)
        if not params.text then
            return
        end

        local percent = 0.9 + 0.2*math.random()
        local text = params.text
        local sound = params.sound or nil
        local colour = params.colour or G.C.CLEAR
        local volume = 1
        local card_aligned = 'bm'
        local y_off = 0.15*G.CARD_H
        if self.area == G.jokers or self.area == G.consumeables then
            y_off = 0.05*self.T.h
        elseif self.area == G.hand then
            y_off = -0.05*G.CARD_H
            card_aligned = 'tm'
        elseif self.area == G.play then
            y_off = -0.05*G.CARD_H
            card_aligned = 'tm'
        elseif self.jimbo  then
            y_off = -0.05*G.CARD_H
            card_aligned = 'tm'
        end
        local scale = 0.65
        local delay = 0.65

        attention_text({
            text = text,
            scale = scale or 1, 
            hold = delay - 0.2,
            backdrop_colour = colour,
            align = card_aligned,
            major = self,
            offset = {x = 0, y = y_off}
        })
        if sound then
            play_sound(sound, 0.8+percent*0.2, volume)
        end
    end
'''
match_indent = true